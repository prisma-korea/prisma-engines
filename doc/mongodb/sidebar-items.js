initSidebarItems({"enum":[["ServerType","Enum representing the possible types of servers that the driver can connect to."],["TopologyType","The possible types for a topology."]],"mod":[["change_stream","Contains the functionality for change streams."],["error","Contains the `Error` and `Result` types that `mongodb` uses."],["event","Contains the events and functionality for monitoring internal `Client` behavior."],["options","Contains all of the types needed to specify options to MongoDB operations."],["results","Contains the types of results returned by CRUD operations."]],"struct":[["Client","This is the main entry point for the API. A `Client` is used to connect to a MongoDB cluster. By default, it will monitor the topology of the cluster, keeping track of any changes, such as servers being added or removed."],["ClientSession","A MongoDB client session. This struct represents a logical session used for ordering sequential operations. To create a `ClientSession`, call `start_session` on a `Client`."],["ClusterTime","Struct modeling a cluster time reported by the server."],["Collection","`Collection` is the client-side abstraction of a MongoDB Collection. It can be used to perform collection-level operations such as CRUD operations. A `Collection` can be obtained through a `Database` by calling either `Database::collection` or `Database::collection_with_options`."],["Cursor","A [`Cursor`] streams the result of a query. When a query is made, the returned [`Cursor`] will contain the first batch of results from the server; the individual results will then be returned as the [`Cursor`] is iterated. When the batch is exhausted and if there are more results, the [`Cursor`] will fetch the next batch of documents, and so forth until the results are exhausted. Note that because of this batching, additional network I/O may occur on any given call to `next`. Because of this, a [`Cursor`] iterates over `Result<T>` items rather than simply `T` items."],["Database","`Database` is the client-side abstraction of a MongoDB database. It can be used to perform database-level operations or to obtain handles to specific collections within the database. A `Database` can only be obtained through a `Client` by calling either `Client::database` or `Client::database_with_options`."],["IndexModel","Specifies the fields and options for an index. For more information, see the documentation."],["Namespace","A struct modeling the canonical name for a collection in MongoDB."],["ServerInfo","A description of the most up-to-date information known about a server. Further details can be found in the Server Discovery and Monitoring specification."],["SessionCursor","A [`SessionCursor`] is a cursor that was created with a [`ClientSession`] that must be iterated using one. To iterate, use [`SessionCursor::next`] or retrieve a [`SessionCursorStream`] using [`SessionCursor::stream`]:"],["SessionCursorStream","A type that implements `Stream` which can be used to stream the results of a [`SessionCursor`]. Returned from [`SessionCursor::stream`]."]]});