initSidebarItems({"enum":[["CachedTx",""],["TransactionError",""],["TxOpRequestMsg",""],["TxOpResponse",""]],"fn":[["spawn_client_list_clear_actor","Spawn the client list clear actor It waits for messages from completed ITXServers and removes the ITXClient from the clients hashmap"],["spawn_itx_actor",""]],"static":[["CACHE_EVICTION_SECS",""]],"struct":[["ITXClient",""],["ITXServer",""],["OpenTx",""],["TransactionActorManager",""],["TxId","How Interactive Transactions work The Interactive Transactions (iTx) follow an actor model design. Where each iTx is created in its own process. When a prisma client requests to start a new transaction, the Transaction Actor Manager spawns a new ITXServer. The ITXServer runs in its own process and waits for messages to arrive via its receive channel to process. The Transaction Actor Manager will also create an ITXClient and add it to hashmap managed by an RwLock. The ITXClient is the only way to communicate with the ITXServer. Once the prisma client receives the iTx Id it can perform database operations using that iTx id. When an operation request is received by the TransactionActorManager, it looks for the client in the hashmap and passes the operation to the client. The ITXClient sends a message to the ITXServer and waits for a response. The ITXServer will then perform the operation and return the result. The ITXServer will perform one operation at a time. All other operations will sit in the message queue waiting to be processed. The ITXServer will handle all messages until it transitions state, e.g “rollback” or “commit”. After that the ITXServer will move into the cache eviction state. In this state, the connection is closed, and any messages it receives, it will will reply with its last state. i.e committed, rollbacked or timeout. The eviction state is there so that if a prisma wants to Once the eviction timeout is exceeded, the ITXServer will send a message to the Background Client list Actor to say that it is completed, and the ITXServer will end. The Background Client list Actor removes the client from the list of clients that are active. During the time the ITXServer is active there is a timer running and if that timeout is exceeded, the transaction is rolledback and the connection to the database is closed. The ITXServer will then move into the eviction state."],["TxOpRequest",""]]});