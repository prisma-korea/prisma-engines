window.SIDEBAR_ITEMS = {"fn":[["deserialize_bson_datetime_from_rfc3339_string","Deserializes a [`crate::DateTime`] from an RFC 3339 formatted string."],["deserialize_chrono_datetime_from_bson_datetime","Deserializes a [`chrono::DateTime`] from a [`crate::DateTime`]."],["deserialize_hex_string_from_object_id","Deserializes a hex string from an ObjectId."],["deserialize_rfc3339_string_from_bson_datetime","Deserializes an ISO string from a DateTime."],["deserialize_timestamp_from_u32","Deserializes a bson::Timestamp from a u32."],["deserialize_u32_from_f64","Deserializes a u32 from an f64 (BSON double). Errors if an exact conversion is not possible."],["deserialize_u32_from_timestamp","Deserializes a u32 from a bson::Timestamp."],["deserialize_u64_from_f64","Deserializes a u64 from an f64 (BSON double). Errors if an exact conversion is not possible."],["deserialize_uuid_1_from_binary","Deserializes a Uuid from a Binary."],["deserialize_uuid_1_from_c_sharp_legacy_binary","Deserializes a Uuid from a Binary in the legacy UUID format."],["deserialize_uuid_1_from_java_legacy_binary","Deserializes a Uuid from a Binary in the legacy UUID format."],["deserialize_uuid_1_from_python_legacy_binary","Deserializes a Uuid from a Binary in the legacy UUID format."],["serialize_bson_datetime_as_rfc3339_string","Serializes a [`crate::DateTime`] as an RFC 3339 (ISO 8601) formatted string."],["serialize_chrono_datetime_as_bson_datetime","Serializes a [`chrono::DateTime`] as a [`crate::DateTime`]."],["serialize_hex_string_as_object_id","Serializes a hex string as an ObjectId."],["serialize_object_id_as_hex_string","Serializes an [`ObjectId`] as a hex string."],["serialize_rfc3339_string_as_bson_datetime","Serializes an ISO string as a DateTime."],["serialize_timestamp_as_u32","Serializes a bson::Timestamp as a u32. Returns an error if the conversion is lossy (i.e. the Timestamp has a non-zero increment)."],["serialize_u32_as_f64","Serializes a u32 as an f64 (BSON double)."],["serialize_u32_as_i32","Attempts to serialize a u32 as an i32. Errors if an exact conversion is not possible."],["serialize_u32_as_i64","Serializes a u32 as an i64."],["serialize_u32_as_timestamp","Serializes a u32 as a bson::Timestamp."],["serialize_u64_as_f64","Serializes a u64 as an f64 (BSON double). Errors if an exact conversion is not possible."],["serialize_u64_as_i32","Attempts to serialize a u64 as an i32. Errors if an exact conversion is not possible."],["serialize_u64_as_i64","Attempts to serialize a u64 as an i64. Errors if an exact conversion is not possible."],["serialize_uuid_1_as_binary","Serializes a Uuid as a Binary."],["serialize_uuid_1_as_c_sharp_legacy_binary","Serializes a Uuid as a Binary in the legacy UUID format."],["serialize_uuid_1_as_java_legacy_binary","Serializes a Uuid as a Binary in the legacy UUID format."],["serialize_uuid_1_as_python_legacy_binary","Serializes a Uuid as a Binary in the legacy UUID format."]],"mod":[["bson_datetime_as_rfc3339_string","Contains functions to serialize a [`crate::DateTime`] as an RFC 3339 (ISO 8601) formatted string and deserialize a [`crate::DateTime`] from an RFC 3339 (ISO 8601) formatted string."],["chrono_datetime_as_bson_datetime","Contains functions to serialize a [`chrono::DateTime`] as a [`crate::DateTime`] and deserialize a [`chrono::DateTime`] from a [`crate::DateTime`]."],["hex_string_as_object_id","Contains functions to serialize a hex string as an ObjectId and deserialize a hex string from an ObjectId"],["rfc3339_string_as_bson_datetime","Contains functions to serialize an RFC 3339 (ISO 8601) formatted string as a [`crate::DateTime`] and deserialize an RFC 3339 (ISO 8601) formatted string from a [`crate::DateTime`]."],["timestamp_as_u32","Contains functions to serialize a bson::Timestamp as a u32 and deserialize a bson::Timestamp from a u32. The u32 should represent seconds since the Unix epoch. Serialization will return an error if the Timestamp has a non-zero increment."],["u32_as_f64","Contains functions to serialize a u32 as an f64 (BSON double) and deserialize a u32 from an f64 (BSON double)."],["u32_as_timestamp","Contains functions to serialize a u32 as a bson::Timestamp and deserialize a u32 from a bson::Timestamp. The u32 should represent seconds since the Unix epoch."],["u64_as_f64","Contains functions to serialize a u64 as an f64 (BSON double) and deserialize a u64 from an f64 (BSON double)."],["uuid_1_as_binary","Contains functions to serialize a [`uuid::Uuid`] as a [`crate::Binary`] and deserialize a [`uuid::Uuid`] from a [`crate::Binary`]."],["uuid_1_as_c_sharp_legacy_binary","Contains functions to serialize a [`uuid::Uuid`] to a [`crate::Binary`] in the legacy C# driver UUID format and deserialize [`uuid::Uuid`] from a [`crate::Binary`] in the legacy C# driver format."],["uuid_1_as_java_legacy_binary","Contains functions to serialize a [`uuid::Uuid`] to a [`crate::Binary`] in the legacy Java driver UUID format and deserialize [`uuid::Uuid`] from a [`crate::Binary`] in the legacy Java driver format."],["uuid_1_as_python_legacy_binary","Contains functions to serialize a [`uuid::Uuid`] to a [`crate::Binary`] in the legacy Python driver UUID format and deserialize [`uuid::Uuid`] from a [`crate::Binary`] in the legacy Python driver format."]]};